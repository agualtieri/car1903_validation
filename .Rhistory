}
minium_standards_prices <- function(data, group_var, aggregation_var){
data %>% select(aggregation_var, group_var) %>% group_by(!!sym(aggregation_var)) %>%
summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
minium_standards_prices <- function(data, group_var, items_var){
data %>% select(group_var, items_var) %>% group_by(!!sym(group_var)) %>%
summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
min.stand.price <- minium_standards_prices(clean, q0_7_localite, ends_with("_prix"))
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
minium_standards <- function(data, ...){
data %>%  group_by(...) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
minium_standards_prices <- function(data, group_var, items_var){
data %>% select(group_var, items_var) %>% group_by(!!sym(group_var)) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
View(min.stand.price)
clean.m <- clean %>% select("q0_7_localirte", ends_with("_prix")) %>% melt()
clean.m <- clean %>% select("q0_7_localite", ends_with("_prix")) %>% melt()
View(clean.m)
min_prix <- clean.m %>% group_by(q0_7_localite) %>% summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
min_prix <- clean.m %>% group_by(q0_7_localite) %>% dplyr::summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
View(min_prix)
min_prix <- clean.m %>% group_by(q0_7_localite, variable) %>% dplyr::summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
View(min_prix)
min_prix <- clean.m %>% group_by(variable) %>% dplyr::summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
View(min_prix)
min_prix <- clean.m %>% group_by(q0_7_localite, variable) %>% dplyr::summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
View(min_prix)
unique(min_prix$minimum_standards)
min_prix <- clean.m %>% data.table::DT[ , .(Totalcount = sum(variable)), by = .(q0_7_localite, variable)]
clean.n <- data.table::data.table(clean.m)
View(clean.n)
min_prix <- clean.n[ , .(Totalcount = sum(variable)), by = .(q0_7_localite, variable)]
min_prix <- clean.n[ , .(Totalcount = count(variable)), by = .(q0_7_localite, variable)]
View(min_prix)
min_prix <- clean.m %>% group_by(variable, q0_7_localite) %>% dplyr::summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
View(min_prix)
clean.m <- clean %>% select("q0_7_localite", ends_with("_prix")) %>% melt()
View(clean.m)
min_prix <- clean.m %>% group_by(variable, q0_7_localite) %>%
filter(!is.na(value)) %>%
dplyr::summarise(., n = n()) %>%
mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
write.csv(clean.m, "./output/min_Standards_prices.csv")
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
View(min.stand.price)
source("./R/minimum_standards.R")
minium_standards <- function(data, ...){
data %>%  group_by(...) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
minium_standards_prices <- function(data, group_var, items_var){
data.m <- data %>% select(group_var, items_var) %>% melt()
data.m %>% group_by(!!sym(items_var), !!sym(group_var)) %>% filter(!is.na(value)) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
minium_standards_prices <- function(data, group_var, items_var){
data.m <- data %>% select(group_var, items_var) %>% melt()
data.m %>% group_by(!!sym(variable), !!sym(group_var)) %>% filter(!is.na(value)) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
View(clean.m)
minium_standards_prices <- function(data, group_var, items_var){
data.m <- data %>% select(group_var, items_var) %>% melt()
data.m %>% group_by(variable, group_var) %>% filter(!is.na(value)) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
minium_standards_prices <- function(data, group_var, items_var){
data.m <- data %>% select(group_var, items_var) %>% melt()
data.m %>% group_by(variable, !!sym(group_var)) %>% filter(!is.na(value)) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
minium_standards <- function(data, ...){
data %>%  group_by(...) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
minium_standards_prices <- function(data, group_var, items_var){
data.m <- data %>% select(group_var, items_var) %>% melt()
data.m %>% group_by(variable, !!sym(group_var)) %>% filter(!is.na(value)) %>%
dplyr::summarise(., n = n()) %>% mutate(minimum_standards = ifelse(n >= 3, "requirement met", "requirement not met"))
}
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
View(min.stand.price)
write.xlsx(min.stand.price, paste0("./output/CAR1903_Minimum Standards Prices_",Sys.Date(),".xlsx"))
## HQ Checks
rm(list = ls())
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(compareDF)
library(readxl)
library(cluster)
library(plyr)
# source
source("./R/check_time.R")
source("./R/data_falsification.R")
source("./R/item_boxplots.R")
source("./R/minimum_standards.R")
# load all sheets
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Avril_2021_Avec_Formules_siège.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[14]]
# check falsification
false.data <- calculateDifferences(clean, tool) # ok
View(tool)
View(clean)
# load all sheets
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Avril_2021_Avec_Formules_siège.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
View(clean)
View(SheetList)
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[14]]
View(clean)
View(tool)
View(SheetList)
tool <- SheetList[[13]]
# check falsification
false.data <- calculateDifferences(clean, tool) # ok
View(false.data)
# check min standards
min.standards <- minium_standards(clean, ) # ok
View(min.standards)
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
View(min.stand.price)
# issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
# issues
issues <- inspect_all(clean)
View(clean)
issues <- inspect_all(clean)
# issues
issues <- inspect_all(clean)
### analysis
meds <- clean %>% select(q0_7_localite, mais_350g_prix, manioc_500g_prix, riz_500g_prix, haricot_500g_prix, arachide_150g_prix,
viande_prix, huile_vegetale_prix, savon_200g_prix, moustiquaire_prix, bidon_20l_prix,
drap_prix, pagne_6yards_prix, natte_prix, bache_prix, marmite_5l_prix, cuvette_30l_prix,
sucre_200g_prix, sel_150g_prix, theiere_prix, seau_20l_prix, bois_chauffage_prix, essence_prix, eau_20l_prix)
sapply(meds, class)
maiz_med <- meds %>% group_by(q0_7_localite) %>% summarise_all(~median(., na.rm = TRUE))
nat_meds <- maiz_med %>% summarise_all(~median(., na.rm = TRUE))
nat_meds[1,1] <- "national"
meds_final <- rbind(maiz_med, nat_meds)
write.xlsx(meds_final, paste0("./output/CAR1903_JMMI_Medians Check Localite_",Sys.Date(),".xlsx"))
## check boxplot
plot <- item_boxplots_formatted(meds, "q0_7_localite", ends_with("_prix"))
plot
# check deletion log
check <- semi_join(clean, del, "uuid")
## HQ Checks
rm(list = ls())
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(compareDF)
library(readxl)
library(cluster)
library(plyr)
# source
source("./R/check_time.R")
source("./R/data_falsification.R")
source("./R/item_boxplots.R")
source("./R/minimum_standards.R")
source("./R/check_log.R")
# load all sheets
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Mai_2021_Avec_Formules.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[13]]
# check falsification
false.data <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
View(false.data)
write.xlsx(false.data, paste0("./output/similar survyes_",Sys.Date(),".xlsx"))
# check min standards
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix"))
View(min.stand.price)
# check min standards
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix")) %>% filter(minium_standards == "requirement not met")
# check min standards
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix")) %>% filter(minimum_standards == "requirement not met")
write.xlsx(min.stand.price, paste0("./output/minimum standards_",Sys.Date(),".xlsx"))
# issues
issues <- inspect_all(clean) %>% filter(!is.na(index))
# issues
issues <- inspect_all(clean)
View(clean)
# issues
issues <- inspect_all(clean)
View(clean)
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(compareDF)
library(readxl)
library(cluster)
library(plyr)
# issues
issues <- inspect_all(clean)
View(clean)
# check log application
log.c <- check_log(clean, log)
# check log application
log.c <- check_log(clean, clean_log)
View(clean_log)
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Mai_2021_Avec_Formules.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[13]]
# issues
issues <- inspect_all(clean)
# check log application
log.c <- check_log(clean, clean_log)
# check deletion log
check <- semi_join(clean, del, "uuid")
# check log application
clean_lo <- clean_log %>% filter(question.name %in% names(clean))
# check log application
clean_log <- clean_log %>% filter(question.name %in% names(clean))
rm(clean_lo)
clean_log <- clean_log %>% filter(uuid %in% clean$uuid)
log.c <- check_log(clean, clean_log)
View(log.c)
write.xlsx(log.c, paste0("./output/check cleaning log_",Sys.Date(),".xlsx"))
### analysis
meds <- clean %>% select(q0_7_localite, mais_350g_prix, manioc_500g_prix, riz_500g_prix, haricot_500g_prix, arachide_150g_prix,
viande_prix, huile_vegetale_prix, savon_200g_prix, moustiquaire_prix, bidon_20l_prix,
drap_prix, pagne_6yards_prix, natte_prix, bache_prix, marmite_5l_prix, cuvette_30l_prix,
sucre_200g_prix, sel_150g_prix, theiere_prix, seau_20l_prix, bois_chauffage_prix, essence_prix, eau_20l_prix)
sapply(meds, class)
maiz_med <- meds %>% group_by(q0_7_localite) %>% summarise_all(~median(., na.rm = TRUE))
nat_meds <- maiz_med %>% summarise_all(~median(., na.rm = TRUE))
nat_meds[1,1] <- "national"
meds_final <- rbind(maiz_med, nat_meds)
write.xlsx(meds_final, paste0("./output/Medians Check Localite_",Sys.Date(),".xlsx"))
## check boxplot
plot <- item_boxplots_formatted(meds, "q0_7_localite", ends_with("_prix"))
plot
## HQ Checks
rm(list = ls())
library(tidyverse)
library(openxlsx)
library(cleaninginspectoR)
library(compareDF)
library(readxl)
library(cluster)
library(plyr)
# source
source("./R/check_time.R")
source("./R/data_falsification.R")
source("./R/item_boxplots.R")
source("./R/minimum_standards.R")
source("./R/check_log.R")
# load all sheets
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Juin_2021_Avec_Formules_Sieg....xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[13]]
View(tool)
tool <- SheetList[[14]]
# check falsification
false.data <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
View(false.data)
write.xlsx(false.data, paste0("./output/similar survyes_",Sys.Date(),".xlsx"))
# check min standards
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix")) %>% filter(minimum_standards == "requirement not met")
View(min.stand.price)
write.xlsx(min.stand.price, paste0("./output/minimum standards_",Sys.Date(),".xlsx"))
# issues
issues <- inspect_all(clean)
# issues
issues <- inspect_all(clean)
library(cleaninginspectoR)
View(clean)
# issues
issues <- inspect_all(clean)
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Juin_2021_Avec_Formules_Sieg....xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[14]]
# issues
issues <- inspect_all(clean)
View(clean)
# check deletion log
check <- semi_join(clean, del, "uuid")
# check log application
clean_log <- clean_log %>% filter(question.name %in% names(clean))
clean_log <- clean_log %>% filter(uuid %in% clean$uuid)
log.c <- check_log(clean, clean_log)
View(check_log)
View(clean_log)
log.c <- check_log(clean, clean_log, variable = "question.name", old_log_var = "old_value", new_log_var = "new_value")
View(check_log)
source("./R/check_log.R")
log.c <- check_log(clean, clean_log, variable = "question.name", old_log_var = "old_value", new_log_var = "new_value")
View(log.c)
View(check_log)
log.c <- check_log(clean, clean_log, variable = "question.name", old_log_var = "old_value", new_log_var = "new_value") %>%
mutate(., check = ifelse(new_log_var == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.c <- check_log(clean, clean_log, variable = "question.name", old_log_var = "old_value", new_log_var = "new_value") %>%
mutate(., check = ifelse(new_value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
View(log.c)
write.xlsx(log.c, paste0("./output/check cleaning log_",Sys.Date(),".xlsx"))
### analysis
meds <- clean %>% select(q0_7_localite, mais_350g_prix, manioc_500g_prix, riz_500g_prix, haricot_500g_prix, arachide_150g_prix,
viande_prix, huile_vegetale_prix, savon_200g_prix, moustiquaire_prix, bidon_20l_prix,
drap_prix, pagne_6yards_prix, natte_prix, bache_prix, marmite_5l_prix, cuvette_30l_prix,
sucre_200g_prix, sel_150g_prix, theiere_prix, seau_20l_prix, bois_chauffage_prix, essence_prix, eau_20l_prix)
# load all sheets
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Juin_2021_Avec_Formules.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[14]]
# check falsification
false.data <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
write.xlsx(false.data, paste0("./output/similar survyes_",Sys.Date(),".xlsx"))
write.xlsx(min.stand.price, paste0("./output/minimum standards_",Sys.Date(),".xlsx"))
# check min standards
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix")) %>% filter(minimum_standards == "requirement not met")
# issues
issues <- inspect_all(clean)
str(clean)
# load all sheets
data <-"./input/REACH_RCA_Base_de_données_Suivi_des_marchés_Juin_2021_Avec_Formules.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
clean <- SheetList[[2]]
clean_log <- SheetList[[3]]
del <- SheetList[[4]]
tool <- SheetList[[14]]
write.xlsx(false.data, paste0("./output/similar survyes_",Sys.Date(),".xlsx"))
# check falsification
false.data <- calculateDifferences(clean, tool) %>% filter(number.different.columns < 5)
write.xlsx(min.stand.price, paste0("./output/minimum standards_",Sys.Date(),".xlsx"))
# check min standards
min.stand.price <- minium_standards_prices(clean, "q0_7_localite", ends_with("_prix")) %>% filter(minimum_standards == "requirement not met")
# issues
issues <- inspect_all(clean)
# check deletion log
check <- semi_join(clean, del, "uuid")
# check log application
clean_log <- clean_log %>% filter(question.name %in% names(clean))
clean_log <- clean_log %>% filter(uuid %in% clean$uuid)
log.c <- check_log(clean, clean_log, variable = "question.name", old_log_var = "old_value", new_log_var = "new_value") %>%
mutate(., check = ifelse(new_value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
write.xlsx(log.c, paste0("./output/check cleaning log_",Sys.Date(),".xlsx"))
### analysis
meds <- clean %>% select(q0_7_localite, mais_350g_prix, manioc_500g_prix, riz_500g_prix, haricot_500g_prix, arachide_150g_prix,
viande_prix, huile_vegetale_prix, savon_200g_prix, moustiquaire_prix, bidon_20l_prix,
drap_prix, pagne_6yards_prix, natte_prix, bache_prix, marmite_5l_prix, cuvette_30l_prix,
sucre_200g_prix, sel_150g_prix, theiere_prix, seau_20l_prix, bois_chauffage_prix, essence_prix, eau_20l_prix)
sapply(meds, class)
maiz_med <- meds %>% group_by(q0_7_localite) %>% summarise_all(~median(., na.rm = TRUE))
nat_meds <- maiz_med %>% summarise_all(~median(., na.rm = TRUE))
nat_meds[1,1] <- "national"
meds_final <- rbind(maiz_med, nat_meds)
write.xlsx(meds_final, paste0("./output/Medians Check Localite_",Sys.Date(),".xlsx"))
## check boxplot
plot <- item_boxplots_formatted(meds, "q0_7_localite", ends_with("_prix"))
plot
View(item_boxplots_formatted)
item_boxplots_formatted <- function(data, group_var, items){
# melt data
data.m <- data %>% select(group_var, items) %>% melt()
# helper function
f <- function(x) {
r <- quantile(x, probs = c(0.00, 0.25, 0.5, 0.75, 1))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r}
# calc mean, median, min, max
medians <- plyr::ddply(data.m, .(group_var, variable), summarise, med = median(value,na.rm=TRUE))
#medians2 <- plyr::ddply(medians, .(variable), summarise, med = median(med,na.rm=TRUE))
mins <- plyr::ddply(data.m, .(variable), summarise, min = min(med,na.rm=TRUE))
max <- plyr::ddply(data.m, .(variable), summarise, max = max(med,na.rm=TRUE))
# produce plot
p <- ggplot(data.m, aes(variable, value, width = 0.25)) +
stat_summary(fun.data = f, geom = "boxplot", fill = "gainsboro") +
theme_bw() +
stat_summary(geom = "crossbar", width= 0.8, fatten=2, color="#EE5859",
fun.data = function(x){c(y=median(x), ymin=median(x), ymax=median(x))})+
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="grey85"),
panel.grid.minor = element_blank()) +
xlab("") +
#ylab("Price (LYD)")+
#ylim(0, 15) +
# scale_y_continuous(breaks = seq(0, 15, 5)) +
geom_text(data = mins, aes(x=variable, y = min, label = format(round(min,digits=0), nsmall=0)),size = 2.5,vjust = 1.5)+
geom_text(data = medians2, aes(x=variable, y = med, label = format(round(med,digits=), nsmall=0)),size =2.5, vjust =  0.6, hjust = -0.6) +
geom_text(data = max, aes(x=variable, y = max, label = format(round(max,digits=0), nsmall=0)), size =2.5, vjust = -1.5) +
theme(axis.text.x = element_text(angle = 0, size = 7, hjust = 0.5 ))+
labs(y= " Price ($$$)")
print(p)
}
## check boxplot
plot <- item_boxplots_formatted(meds, "q0_7_localite", ends_with("_prix"))
item_boxplots_formatted <- function(data, group_var, items){
# melt data
data.m <- data %>% select(group_var, items) %>% melt()
# helper function
f <- function(x) {
r <- quantile(x, probs = c(0.00, 0.25, 0.5, 0.75, 1))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r}
# calc mean, median, min, max
medians <- plyr::ddply(data.m, .(group_var, variable), summarise, med = median(value,na.rm=TRUE))
#medians2 <- plyr::ddply(medians, .(variable), summarise, med = median(med,na.rm=TRUE))
mins <- plyr::ddply(data.m, .(variable), summarise, min = min(med,na.rm=TRUE))
max <- plyr::ddply(data.m, .(variable), summarise, max = max(med,na.rm=TRUE))
# produce plot
p <- ggplot(data.m, aes(variable, value, width = 0.25)) +
stat_summary(fun.data = f, geom = "boxplot", fill = "gainsboro") +
theme_bw() +
stat_summary(geom = "crossbar", width= 0.8, fatten=2, color="#EE5859",
fun.data = function(x){c(y=median(x), ymin=median(x), ymax=median(x))})+
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="grey85"),
panel.grid.minor = element_blank()) +
xlab("") +
#ylab("Price (LYD)")+
#ylim(0, 15) +
# scale_y_continuous(breaks = seq(0, 15, 5)) +
geom_text(data = mins, aes(x=variable, y = min, label = format(round(min,digits=0), nsmall=0)),size = 2.5,vjust = 1.5)+
geom_text(data = medians, aes(x=variable, y = med, label = format(round(med,digits=), nsmall=0)),size =2.5, vjust =  0.6, hjust = -0.6) +
geom_text(data = max, aes(x=variable, y = max, label = format(round(max,digits=0), nsmall=0)), size =2.5, vjust = -1.5) +
theme(axis.text.x = element_text(angle = 0, size = 7, hjust = 0.5 ))+
labs(y= " Price ($$$)")
print(p)
}
## check boxplot
plot <- item_boxplots_formatted(meds, "q0_7_localite", ends_with("_prix"))
item_boxplots_formatted <- function(data, group_var, items){
# melt data
data.m <- data %>% select(group_var, items) %>% melt()
# helper function
f <- function(x) {
r <- quantile(x, probs = c(0.00, 0.25, 0.5, 0.75, 1))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r}
# calc mean, median, min, max
medians <- plyr::ddply(data.m, .(group_var, variable), summarise, med = median(value,na.rm=TRUE))
#medians2 <- plyr::ddply(medians, .(variable), summarise, med = median(med,na.rm=TRUE))
mins <- plyr::ddply(data.m, .(variable), summarise, min = min(value,na.rm=TRUE))
max <- plyr::ddply(data.m, .(variable), summarise, max = max(value,na.rm=TRUE))
# produce plot
p <- ggplot(data.m, aes(variable, value, width = 0.25)) +
stat_summary(fun.data = f, geom = "boxplot", fill = "gainsboro") +
theme_bw() +
stat_summary(geom = "crossbar", width= 0.8, fatten=2, color="#EE5859",
fun.data = function(x){c(y=median(x), ymin=median(x), ymax=median(x))})+
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="grey85"),
panel.grid.minor = element_blank()) +
xlab("") +
#ylab("Price (LYD)")+
#ylim(0, 15) +
# scale_y_continuous(breaks = seq(0, 15, 5)) +
geom_text(data = mins, aes(x=variable, y = min, label = format(round(min,digits=0), nsmall=0)),size = 2.5,vjust = 1.5)+
geom_text(data = medians, aes(x=variable, y = med, label = format(round(med,digits=), nsmall=0)),size =2.5, vjust =  0.6, hjust = -0.6) +
geom_text(data = max, aes(x=variable, y = max, label = format(round(max,digits=0), nsmall=0)), size =2.5, vjust = -1.5) +
theme(axis.text.x = element_text(angle = 0, size = 7, hjust = 0.5 ))+
labs(y= " Price ($$$)")
print(p)
}
## check boxplot
plot <- item_boxplots_formatted(meds, "q0_7_localite", ends_with("_prix"))
